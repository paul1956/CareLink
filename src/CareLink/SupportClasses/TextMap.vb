' Licensed to the .NET Foundation under one or more agreements.
' The .NET Foundation licenses this file to you under the MIT license.
' See the LICENSE file in the project root for more information.

' Initialize errorTextMap
Public Class TextMap
    Public Const DEVICE_FAMILY_GUARDIAN As String = "Guardian"
    Public Const DEVICE_FAMILY_NGP As String = "NGP"
    Public Const ERROR_TEXT_PREFIX_GUARDIAN As String = "GM_"
    Public Const ERROR_TEXT_PREFIX_NGP As String = "N"

    Public Shared ReadOnly s_errorCodeMap As New Dictionary(Of String, String) From {
        {"002", "002"},
        {"003", "002"},
        {"004", "002"},
        {"013", "002"},
        {"014", "002"},
        {"015", "002"},
        {"016", "002"},
        {"017", "002"},
        {"018", "002"},
        {"019", "002"},
        {"020", "002"},
        {"022", "002"},
        {"023", "002"},
        {"026", "002"},
        {"027", "002"},
        {"028", "002"},
        {"030", "002"},
        {"031", "002"},
        {"033", "002"},
        {"034", "002"},
        {"044", "002"},
        {"045", "002"},
        {"046", "002"},
        {"049", "002"},
        {"053", "002"},
        {"054", "002"},
        {"060", "002"},
        {"063", "002"},
        {"064", "002"},
        {"065", "002"},
        {"067", "002"},
        {"068", "002"},
        {"074", "002"},
        {"075", "002"},
        {"076", "002"},
        {"079", "002"},
        {"080", "002"},
        {"081", "002"},
        {"082", "002"},
        {"117", "117"},
        {"817", "817"},
        {"805", "805"},
        {"819", "819"},
        {"820", "819"},
        {"012", "012"},
        {"807", "807"},
        {"808", "807"},
        {"814", "814"},
        {"103", "103"},
        {"829", "829"},
        {"830", "829"},
        {"831", "829"},
        {"100", "100"},
        {"051", "051"},
        {"775", "775"},
        {"776", "776"},
        {"869", "869"},
        {"832", "832"},
        {"812", "812"},
        {"777", "777"},
        {"778", "777"},
        {"789", "777"},
        {"833", "833"},
        {"024", "024"},
        {"035", "024"},
        {"040", "024"},
        {"047", "024"},
        {"048", "024"},
        {"050", "024"},
        {"055", "024"},
        {"131", "024"},
        {"052", "052"},
        {"007", "007"},
        {"008", "007"},
        {"140", "140"},
        {"801", "801"},
        {"816", "816"},
        {"823", "823"},
        {"824", "823"},
        {"058", "058"},
        {"069", "069"},
        {"780", "780"},
        {"781", "780"},
        {"795", "795"},
        {"815", "815"},
        {"802", "802"},
        {"803", "803"},
        {"822", "822"},
        {"821", "821"},
        {"107", "107"},
        {"066", "066"},
        {"796", "796"},
        {"057", "057"},
        {"006", "006"},
        {"084", "084"},
        {"061", "061"},
        {"037", "037"},
        {"038", "037"},
        {"039", "037"},
        {"041", "037"},
        {"042", "037"},
        {"043", "037"},
        {"025", "025"},
        {"029", "029"},
        {"077", "077"},
        {"779", "779"},
        {"870", "870"},
        {"011", "011"},
        {"073", "011"},
        {"104", "104"},
        {"113", "113"},
        {"105", "105"},
        {"106", "105"},
        {"130", "130"},
        {"797", "797"},
        {"798", "797"},
        {"794", "794"},
        {"109", "109"},
        {"784", "784"},
        {"110", "110"},
        {"810", "810"},
        {"811", "810"},
        {"809", "809"},
        {"062", "062"},
        {"070", "062"},
        {"071", "062"},
        {"072", "062"},
        {"108", "062"},
        {"114", "062"},
        {"786", "062"},
        {"787", "062"},
        {"788", "062"},
        {"799", "062"},
        {"806", "062"},
        {"825", "062"},
        {"828", "062"},
        {"827", "827"}
    }

    Public Shared ReadOnly s_errorTextMap As New Dictionary(Of String, String) From {
        {"", ""},
        {"3", "Battery out limit"},
        {"4", "Delivery stopped. Check BG"},
        {"5", "Pump battery depleted. Insulin delivery stopped"},
        {"6", "Auto Off. Insulin delivery stopped"},
        {"16", "Pump reset. Insulin delivery stopped"},
        {"43", "Pump motor error. Insulin delivery stopped"},
        {"50", "Bolus stopped"},
        {"51", "Delivery limit exceeded. Check BG"},
        {"55", "Pump battery failed. Replace battery"},
        {"59", "Button error"},
        {"61", "Check settings. Insulin delivery stopped"},
        {"62", "Empty reservoir"},
        {"66", "No reservoir"},
        {"69", "Loading Incomplete During Infusion Set Change"},
        {"74", "Finish loading"},
        {"81", "Replace pump battery now"},
        {"82", "Low Reservoir"},
        {"83", "Check BG"},
        {"84", "Alarm clock"},
        {"85", "Max fill reached"},
        {"86", "Weak battery detected"},
        {"87", "Missed bolus"},
        {"88", "Silenced sensor alert. Check alarm history"},
        {"101", "High SG. CHECK BG"},
        {"102", "Low SG"},
        {"103", "Threshold Suspend"},
        {"104", "Meter BG now"},
        {"105", "Calibration Reminder"},
        {"106", "Calibration error"},
        {"107", "Sensor expired"},
        {"108", "Change sensor"},
        {"109", "Sensor error"},
        {"110", "Recharge transmitter"},
        {"111", "Transmitter battery low"},
        {"112", "Weak signal"},
        {"113", "Lost sensor"},
        {"114", "Sensor glucose approaching high limit"},
        {"115", "Sensor glucose approaching low limit"},
        {"116", "Sensor glucose rising rapidly"},
        {"117", "Sensor glucose falling rapidly"},
        {"Axx", "Pump error Anull"},
        {"Exx", "Pump error Enull"},
        {"N002", "Pump Error. Delivery Stopped"},
        {"N006", "Pump Battery Out Limit"},
        {"N007", "Delivery Stopped. Check BG"},
        {"N011", "Replace Pump Battery Now"},
        {"N012", "Auto Suspend Limit Reached. Delivery Stopped"},
        {"N024", "Critical Pump Error. Stop Pump Use. Use Other Treatment"},
        {"N025", "Pump Power Error. Record Settings"},
        {"N029", "Pump Restarted. Delivery Stopped"},
        {"N037", "Pump Motor Error. Delivery Stopped"},
        {"N051", "Bolus Stopped"},
        {"N052", "Delivery Limit Exceeded. Check BG"},
        {"N057", "Pump Battery Not Compatible"},
        {"N058", "Insert A New AA Battery"},
        {"N061", "Pump Button Error. Delivery Stopped"},
        {"N062", "New Notification Received From Pump"},
        {"N066", "No Reservoir Detected During Infusion Set Change"},
        {"N069", "Loading Incomplete During Infusion Set Change"},
        {"N073", "Replace Pump Battery Now"},
        {"N077", "Pump Settings Error. Delivery Stopped"},
        {"N084", "Pump Battery Removed. Replace Battery"},
        {"N100", "Bolus Entry Timed Out Before Delivery"},
        {"N103", "BG Check Reminder"},
        {"N104", "Replace Pump Battery Soon"},
        {"N105", "Reservoir Low. Change Reservoir Soon"},
        {"N107", "Missed Meal Bolus Reminder"},
        {"N109", "Set Change Reminder"},
        {"N110", "Silenced Sensor Alert. Check Alarm History"},
        {"N113", "Reservoir Empty. Change Reservoir Now"},
        {"N117", "Active Insulin Cleared"},
        {"N130", "Rewind Required. Delivery Stopped"},
        {"N140", "Delivery Suspended. Connect Infusion Set"},
        {"N775", "Calibrate Now"},
        {"N776", "Calibration Error"},
        {"N777", "Change Sensor"},
        {"N779", "Recharge Transmitter Now"},
        {"N780", "Lost Sensor Signal"},
        {"N784", "SG Rising Rapidly"},
        {"N794", "Sensor Expired. Change Sensor"},
        {"N795", "Lost Sensor Signal. Check Transmitter"},
        {"N796", "No Sensor Signal"},
        {"N797", "Sensor Connected"},
        {"N801", "Do Not Calibrate. Wait Up To 3 Hours"},
        {"N802", "Low Sensor Glucose"},
        {"N803", "Low Sensor Glucose. Check BG"},
        {"N805", "Alert Before Low. Check BG"},
        {"N807", "Basal Delivery Resumed. Check BG"},
        {"N809", "Suspend On Low. Delivery Stopped. Check BG"},
        {"N810", "Suspend Before Low. Delivery Stopped. Check BG"},
        {"N812", "Call Emergency Assistance"},
        {"N814", "Basal Resumed. SG Still Under Low Limit. Check BG"},
        {"N815", "Low Limit Changed. Basal Manually Resumed. Check BG"},
        {"N816", "High Sensor Glucose"},
        {"N817", "Alert Before High. Check BG"},
        {"N819", "Auto Mode Exit. Basal Delivery Started. BG Required"},
        {"N821", "Minimum Delivery Timeout. BG Required"},
        {"N822", "Maximum Delivery Timeout. BG Required"},
        {"N823", "High Sensor Glucose For Over 1 Hour"},
        {"N827", "Urgent Low Sensor Glucose. Check BG"},
        {"N829", "BG Required"},
        {"N832", "Calibration Required"},
        {"N833", "Correction Bolus Recommended"},
        {"N869", "Calibration Reminder"},
        {"N870", "Recharge Transmitter Soon"},
        {"Nnodata1", "Reconnecting To Pump"},
        {"Nnodata2", "Lost Signal. Check Mobile Application"},
        {"GM_alert.sg.threshold.low.urgent", "Urgent Low Sensor Glucose"},
        {"GM_alert.sg.threshold.low", "Low Sensor Glucose"},
        {"GM_alert.sg.predictive.low", "Low Predicted"},
        {"GM_alert.sg.rate.falling", "Fall Alert"},
        {"GM_alert.sg.threshold.high", "High Sensor Glucose"},
        {"GM_alert.sg.predictive.high", "High Predicted"},
        {"GM_alert.sg.rate.rising", "Rise Alert"},
        {"GM_alert.transmitter.battery", "Transmitter Battery Empty"},
        {"GM_alert.sensor.replace.calibrationError", "Change Sensor"},
        {"GM_alert.sensor.replace.sensorError", "Change Sensor"},
        {"GM_alert.sensor.replace.lifetime", "Sensor End of Life"},
        {"GM_alert.transmitter.signal", "Lost Sensor Communication"},
        {"GM_alert.sensor.connection", "Sensor Connected"},
        {"GM_alert.sensor.calibration.rejected", "Calibration Not Accepted"},
        {"GM_alert.sensor.calibration.calibrate_now", "Calibrate Now"},
        {"GM_alert.sensor.error", "Sensor Glucose Not Available"},
        {"GM_alert.calibration.reminder", "Calibration Reminder"},
        {"GM_alert.transmitter.error", "Transmitter Error"},
        {"GM_alert.receiver.battery.low", "Mobile Device Battery Low"},
        {"Nalert.sg.threshold.low.urgent", "Urgent Low Sensor Glucose"},
        {"Nalert.sg.threshold.low", "Low Sensor Glucose"},
        {"Nalert.sg.predictive.low", "Low Predicted"},
        {"Nalert.sg.rate.falling", "Fall Alert"},
        {"Nalert.sg.threshold.high", "High Sensor Glucose"},
        {"Nalert.sg.predictive.high", "High Predicted"},
        {"Nalert.sg.rate.rising", "Rise Alert"},
        {"Nalert.transmitter.battery", "Transmitter Battery Empty"},
        {"Nalert.sensor.replace.calibrationError", "Change Sensor"},
        {"Nalert.sensor.replace.sensorError", "Change Sensor"},
        {"Nalert.sensor.replace.lifetime", "Sensor End of Life"},
        {"Nalert.transmitter.signal", "Lost Sensor Communication"},
        {"Nalert.sensor.connection", "Sensor Connected"},
        {"Nalert.sensor.calibration.rejected", "Calibration Not Accepted"},
        {"Nalert.sensor.calibration.calibrate_now", "Calibrate Now"},
        {"Nalert.sensor.error", "Sensor Glucose Not Available"},
        {"Nalert.calibration.reminder", "Calibration Reminder"},
        {"Nalert.transmitter.error", "Transmitter Error"},
        {"Nalert.receiver.battery.low", "Mobile Device Battery Low"}
    }

    Private Shared Function GetErrorMessage(deviceFamily As String, guardianErrorCode As String, ngpErrorCode As Integer) As String
        Dim errorTextId As String = Nothing
        Dim internalEC As String

        Dim value As String = Nothing
        If deviceFamily = DEVICE_FAMILY_GUARDIAN Then
            If guardianErrorCode IsNot Nothing Then
                errorTextId = $"{ERROR_TEXT_PREFIX_GUARDIAN}{guardianErrorCode}"
            End If
        ElseIf deviceFamily = DEVICE_FAMILY_NGP Then
            Dim formattedEC As String = ngpErrorCode.ToString("D3")
            internalEC = If(s_errorCodeMap.TryGetValue(formattedEC, value), value, formattedEC)
            errorTextId = $"{ERROR_TEXT_PREFIX_NGP}{internalEC}"
        End If

        Return If(Not String.IsNullOrEmpty(errorTextId) AndAlso s_errorTextMap.TryGetValue(errorTextId, value), value, Nothing)
    End Function

    Public Shared Function GetAlarmMessage(deviceFamily As String, alarm As Alarm) As String
        Return GetErrorMessage(deviceFamily, alarm.Kind, alarm.Code)
    End Function

    Public Shared Function GetNotificationMessage(deviceFamily As String, notification As ClearedNotification) As String
        Return GetErrorMessage(deviceFamily, notification.MessageId, notification.FaultId)
    End Function

    Public Shared Function GetNotificationMessage(deviceFamily As String, messageId As String, faultId As Integer) As String
        Return GetErrorMessage(deviceFamily, messageId, faultId)
    End Function

    Public Class Alarm
        Public Property Code As Integer
        Public Property Kind As String
    End Class

    Public Class ClearedNotification
        Public Property FaultId As Integer
        Public Property MessageId As String
    End Class
End Class
